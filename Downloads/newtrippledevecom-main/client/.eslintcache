[{"C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\index.js":"1","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\App.js":"2","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\reportWebVitals.js":"3","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\Admin\\Admin.js":"4","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\User.js":"5","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\Adminlogin.js":"6","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\Userlogin.js":"7","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\Admin\\Menumanage.js":"8","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\Url.js":"9","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\Userregister.js":"10","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\Admin\\Uploadproduct.js":"11"},{"size":502,"mtime":1612358790000,"results":"12","hashOfConfig":"13"},{"size":585,"mtime":1612358790000,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1612358790000,"results":"15","hashOfConfig":"13"},{"size":661,"mtime":1612358790000,"results":"16","hashOfConfig":"13"},{"size":599,"mtime":1612358790000,"results":"17","hashOfConfig":"13"},{"size":2947,"mtime":1612358790000,"results":"18","hashOfConfig":"13"},{"size":2828,"mtime":1612358790000,"results":"19","hashOfConfig":"13"},{"size":15275,"mtime":1612788373425,"results":"20","hashOfConfig":"13"},{"size":59,"mtime":1612358790000,"results":"21","hashOfConfig":"13"},{"size":7418,"mtime":1612358790000,"results":"22","hashOfConfig":"13"},{"size":15470,"mtime":1612358790000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1it6urg",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"26"},"C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\index.js",[],["54","55"],"C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\App.js",["56"],"import React, { Component } from \"react\";\nimport { Switch, BrowserRouter, Router, Route } from \"react-router-dom\";\nimport Admin from \"./Component/Admin/Admin\";\nimport User from \"./Component/User/User\";\nimport Adminlogin from \"./Component/User/Adminlogin\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/admindashboard\" component={Admin} />\n          <Route path=\"/admin\" component={Adminlogin} />\n          <Route path=\"/\" component={User} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\reportWebVitals.js",[],"C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\Admin\\Admin.js",["57"],"import React, { Component } from \"react\";\nimport Uploadproduct from \"./Uploadproduct\";\nimport { Switch, BrowserRouter, Router, Route } from \"react-router-dom\";\nimport Menumanage from \"./Menumanage\";\nexport default class Admin extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <h1>admin dashboard</h1>\n        <Switch>\n          <Route\n            exact\n            path=\"/admindashboard/uploadproduct\"\n            component={Uploadproduct}\n          />\n          <Route\n            exact\n            path=\"/admindashboard/menumange\"\n            component={Menumanage}\n          />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\User.js",["58"],"import React, { Component } from \"react\";\nimport { Switch, BrowserRouter, Router, Route } from \"react-router-dom\";\nimport Userlogin from \"./Userlogin\";\nimport Userregister from \"./Userregister\";\nexport default class User extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"row\" style={{ justifyContent: \"center\" }}>\n          <h1>User header</h1>\n        </div>\n        <Switch>\n          <Route path=\"/userregister\" component={Userregister} />\n          <Route path=\"/userlogin\" component={Userlogin} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\Adminlogin.js",["59"],"import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport \"./adminlogincss.css\";\nimport URL from \"./Url\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { withRouter } from \"react-router-dom\";\nclass Adminlogin extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: \"\",\n      password: \"\",\n      mesg: \"\",\n      redirect: false,\n    };\n  }\n\n  onchange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  notify = () => toast.error(this.state.mesg);\n  formsubmit = async (e) => {\n    const { username, password } = this.state;\n    e.preventDefault();\n    await axios\n      .post(\n        `${URL}/login-admin`,\n        { username, password },\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Cotent-Type\": \"application/json\",\n          },\n        }\n      )\n      .then((data) => {\n        console.log(data.data);\n        localStorage.setItem(\"auth\", data.data.token);\n        localStorage.setItem(\"userrole\", data.data.role);\n        localStorage.setItem(\"username\", data.data.username);\n        this.props.history.push(\"/admindashboard\");\n      })\n      .catch((err) => {\n        console.log(\"ee\", err.response);\n        this.setState({ mesg: err.response.data.messege.msg });\n        this.notify();\n      });\n  };\n  render() {\n    return (\n      <div className=\"wrapper fadeInDown\">\n        <div id=\"formContent\">\n          {/* Tabs Titles */}\n          {/* Icon */}\n          <div className=\"fadeIn first\"></div>\n          {/* Login Form */}\n          <form onSubmit={this.formsubmit}>\n            <input\n              type=\"text\"\n              id=\"login\"\n              name=\"username\"\n              value={this.state.username}\n              onChange={this.onchange}\n              className=\"fadeIn second\"\n              placeholder=\"Username\"\n            />\n            <input\n              type=\"text\"\n              id=\"password\"\n              name=\"password\"\n              value={this.state.password}\n              onChange={this.onchange}\n              className=\"fadeIn third\"\n              placeholder=\"password\"\n            />\n            <input\n              type=\"submit\"\n              className=\"fadeIn fourth\"\n              defaultValue=\"Log In\"\n            />\n          </form>\n          <ToastContainer\n            position=\"top-right\"\n            autoClose={5000}\n            hideProgressBar={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n          />\n\n          <ToastContainer />\n          {/* Remind Passowrd */}\n          <div id=\"formFooter\">\n            <a className=\"underlineHover\" href=\"#\">\n              Forgot Password?\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default withRouter(Adminlogin);\n","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\Userlogin.js",[],"C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\Admin\\Menumanage.js",["60","61","62","63","64","65"],"import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport URL from \"../User/Url\";\nimport \"./Menutemplate.css\";\nimport FlatList from \"flatlist-react\";\nimport { confirmAlert } from \"react-confirm-alert\"; // Import\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css\nimport Modal from \"react-modal\";\n\nexport default class Menumanage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      simplemenu: \"\",\n      dropdownholder: \"\",\n      megamenuholder: \"\",\n      submegamenu: \"\",\n      subdropdownmenu: \"\",\n      selecteddropdwnholder: \"\",\n      selectedmegadwnholder: \"\",\n\n      modalIsOpen: false,\n      menus: [],\n      oldCategory: \"\",\n      editableCategory: \"\",\n      oldsubcategory: \"\",\n      editableubdrop: \"\",\n    };\n  }\n  alertsubmit = (id) => {\n    confirmAlert({\n      title: \"Confirm to submit\",\n      message: \"Are you sure to do this.\",\n      buttons: [\n        {\n          label: \"Yes\",\n          onClick: async () => {\n            await axios.get(`${URL}/deletecategory/${id}`).then((data) => {\n              console.log(data);\n              this.componentDidMount();\n            });\n          },\n        },\n        {\n          label: \"No\",\n        },\n      ],\n    });\n  };\n  megaMunuHolderalertsubmit = (id) => {\n    confirmAlert({\n      title: \"Confirm to submit\",\n      message: \"Are you sure to do this.\",\n      buttons: [\n        {\n          label: \"Yes\",\n          onClick: async () => {\n            await axios.get(`${URL}/deletemegaMunecategory/${id}`).then((data) => {\n              console.log(data);\n              this.componentDidMount();\n            });\n          },\n        },\n        {\n          label: \"No\",\n        },\n      ],\n    });\n  };\n  onchange = (data) => {\n    this.setState({ [data.target.name]: data.target.value });\n  };\n  simplemenusub = async () => {\n    const { simplemenu } = this.state;\n    await axios\n      .post(\n        `${URL}/savemenu`,\n        { type: \"simplemenu\", category: simplemenu },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((data) => {\n        alert(\"Menu aded\");\n        this.componentDidMount();\n      });\n  };\n\n  dropdownholdersub = async () => {\n    const { dropdownholder } = this.state;\n    await axios\n      .post(\n        `${URL}/savemenu`,\n        { type: \"dropdownmenuholder\", category: dropdownholder },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((data) => {\n        alert(\"dropdownmenu holder aded\");\n        this.componentDidMount();\n      });\n  };\n\n  getmenus = async () => {\n    await axios.get(`${URL}/getmenus`).then((data) => {\n      this.setState({ menus: data.data });\n    });\n  };\n  megamenuholdersub = async () => {\n    const { megamenuholder } = this.state;\n    await axios\n      .post(\n        `${URL}/savemenu`,\n        { type: \"megamenuholder\", category: megamenuholder },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((data) => {\n        alert(\"Megamenu holder aded\");\n        this.componentDidMount();\n      });\n  };\n  selectdropdownholder = (e) => {\n    this.setState({ selecteddropdwnholder: e.target.value });\n  };\n  selectmegaholder = (e) => {\n    this.setState({ selectedmegadwnholder: e.target.value });\n  };\n\n  addsubdropdwn = async () => {\n    const { selecteddropdwnholder, subdropdownmenu } = this.state;\n    await axios\n      .post(\n        `${URL}/addsubdrop`,\n        { selecteddropdwnholder, subdropdownmenu },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((data) => {\n        this.setState({ subdropdownmenu: \"\" });\n        this.componentDidMount();\n      });\n  };\n  addsubMega = async () => {\n    const { selectedmegadwnholder, submegamenu } = this.state;\n    await axios\n      .post(\n        `${URL}/addsubMega`,\n        { selectedmegadwnholder, submegamenu  },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((data) => {\n        this.setState({ submegamenu: \"\" });\n        this.componentDidMount();\n      });\n  };\n  deletesubcategory = async (subcategory) => {\n    await axios\n      .post(\n        `${URL}/deletesubcategory`,\n        { subcategory },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((data) => {\n        if (data.data.success) this.componentDidMount();\n      });\n  };\n  renderPerson = (person, idx) => {\n    return (\n      <li key={idx} className=\"list-unstyled mt-2 mb-2\">\n        <b>{person.Name} </b>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary btn-sm\"\n          onClick={() => this.subcategoryedit(person.Name)}\n        >\n          <i className=\"fa fa-edit\" style={{ fontSize: \"16px\" }}></i>\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary btn-sm ml-2\"\n          onClick={() => this.deletesubcategory(person.Name)}\n        >\n          <i className=\"fa fa-close\" style={{ fontSize: \"16px\" }}></i>\n        </button>\n      </li>\n    );\n  };\n  renderMegaMenu = (person, idx) => {\n    return (\n      <li key={idx} className=\"list-unstyled mt-2 mb-2\">\n        <b>{person.Name} </b>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary btn-sm\"\n          onClick={() => this.subcategoryedit(person.Name)}\n        >\n          <i className=\"fa fa-edit\" style={{ fontSize: \"16px\" }}></i>\n        </button>\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary btn-sm ml-2\"\n          onClick={() => this.deletesubcategory(person.Name)}\n        >\n          <i className=\"fa fa-close\" style={{ fontSize: \"16px\" }}></i>\n        </button>\n      </li>\n    );\n  };\n  closeModal = () => {\n    this.setState({ modalIsOpen: false });\n  };\n\n  componentDidMount() {\n    this.getmenus();\n  }\n  subcategoryedit = (subcategory) => {\n    this.setState({\n      oldsubcategory: subcategory,\n      editableubdrop: subcategory,\n      modalIsOpen: true,\n    });\n  };\n  editAble = (cat) => {\n    this.setState({\n      oldCategory: cat,\n      editableCategory: cat,\n      modalIsOpen: true,\n    });\n  };\n  editCategory = async () => {\n    const { oldCategory,editableCategory} = this.state;\n    await axios\n      .post(\n        `${URL}/editCategory`,\n        { oldCategory,editableCategory },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((data) => {\n        if (data.data.success) this.setState({ modalIsOpen: false });\n        this.componentDidMount();\n      });\n  };\n  editsubdropdwn = async () => {\n    const { oldsubcategory, editableubdrop } = this.state;\n    await axios\n      .post(\n        `${URL}/editsubdrop`,\n        { oldsubcategory, editableubdrop },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((data) => {\n        if (data.data.success) this.setState({ modalIsOpen: false });\n        this.componentDidMount();\n      });\n  };\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Modal\n          isOpen={this.state.modalIsOpen}\n          onRequestClose={this.closeModal}\n          contentLabel=\"Example Modal\"\n        >\n          <input\n            type=\"text\"\n            onChange={this.onchange}\n            name=\"editableubdrop\"\n            value={this.state.editableubdrop}\n            placeholder=\"enter sub dropdown menu\"\n          ></input>\n          <button type=\"button\" onClick={this.editsubdropdwn}>\n            Add\n          </button>\n        </Modal>\n        {/* <Modal\n          isOpen={this.state.modalIsOpen}\n          onRequestClose={this.closeModal}\n          contentLabel=\"Example Modal\"\n        >\n          <input\n            type=\"text\"\n            onChange={this.onchange}\n            name=\"editableCategory\"\n            value={this.state.editableCategory}\n            placeholder=\"update category\"\n          ></input>\n          <button type=\"button\" onClick={this.editCategory}>\n            Add\n          </button>\n        </Modal> */}\n        <div className=\"form-row \">\n          <div className=\"form-group col-md-4\">\n            <input\n              type=\"text\"\n              name=\"simplemenu\"\n              placeholder=\"Enter a simple menu\"\n              onChange={this.onchange}\n            ></input>\n            <button type=\"button\" onClick={this.simplemenusub}>\n              Add\n            </button>\n          </div>\n          <div className=\"form-group col-md-4\">\n            <input\n              type=\"text\"\n              name=\"dropdownholder\"\n              placeholder=\"Enter Dropdownholder\"\n              onChange={this.onchange}\n            ></input>\n            <button type=\"button\" onClick={this.dropdownholdersub}>\n              Add\n            </button>\n          </div>\n          <div className=\"form-group col-md-4\">\n            <input\n              type=\"text\"\n              name=\"megamenuholder\"\n              placeholder=\"Enter a Megamenuholder\"\n              onChange={this.onchange}\n            ></input>\n            <button type=\"button\" onClick={this.megamenuholdersub}>\n              Add\n            </button>\n          </div>\n        </div>\n        <div className=\"form-row\">\n          <div className=\"form-group col-md-6\">\n            <label>Select dropdownholder</label>\n            <select onChange={this.selectdropdownholder}>\n              <option value=\"0\"> Please select dropdownholder</option>\n              {this.state.menus.map((item, index) => {\n                if (item.Type == \"dropdownmenuholder\") {\n                  return (\n                    <option key={index} value={item.CategoryName}>\n                      {item.CategoryName}\n                    </option>\n                  );\n                }\n              })}\n            </select>\n            <br></br>\n            <input\n              type=\"text\"\n              onChange={this.onchange}\n              name=\"subdropdownmenu\"\n              value={this.state.subdropdownmenu}\n              placeholder=\"enter sub dropdown menu\"\n            ></input>\n            <button type=\"button\" onClick={this.addsubdropdwn}>\n              Add\n            </button>\n          </div>\n          <div className=\"form-group col-md-6\">\n            <label>Select Megamenu Holder</label>\n            <select onChange={this.selectmegaholder}>\n              <option value=\"0\"> Please select Megaholder</option>\n              {this.state.menus.map((item, index) => {\n                if (item.Type == \"megamenuholder\") {\n                  return (\n                    <option key={index} value={item.CategoryName}>\n                      {item.CategoryName}\n                    </option>\n                  );\n                }\n              })}\n            </select>\n            <br></br>\n            <input\n              type=\"text\"\n              name=\"submegamenu\"\n              onChange={this.onchange}\n              value={this.state.submegamenu}\n              placeholder=\"Enter submegamenu\"\n            ></input>\n            <button type=\"button\" onClick={this.addsubMega}>Add</button>\n          </div>\n        </div>\n        <div className=\"d-flex justify-content-center\">\n          <h2>All Drop Menus</h2>\n        </div>\n        {this.state.menus.map((item, index) => {\n          if (item.Type === \"dropdownmenuholder\") {\n            return (\n              <div key={index}>\n                <div className=\"d-flex justify-content-center my-4\">\n                  <button type=\"button\" className=\"btn btn-primary btn-lg\">\n                    {item.CategoryName}\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-secondary btn-sm\"\n                    onClick={() =>\n                      this.editAble(item.CategoryName)\n                    }\n                  >\n                    <i className=\"fa fa-edit\" style={{ fontSize: \"16px\" }}></i>\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-secondary btn-sm ml-2\"\n                    onClick={() => this.alertsubmit(item._id)}\n                  >\n                    <i className=\"fa fa-close\" style={{ fontSize: \"16px\" }}></i>\n                  </button>\n                </div>\n\n                <div className=\"row\">\n                  <FlatList\n                    list={item.SubCategory}\n                    renderItem={this.renderPerson}\n                    renderWhenEmpty={() => (\n                      <div className=\"d-flex justify-content-center my-4\">\n                        You didn't add any sub category yet\n                      </div>\n                    )}\n                    display={{\n                      grid: true,\n                      minColumnWidth: \"5px\",\n                      gridGap: \"10px\",\n                    }}\n                  />\n                </div>\n              </div>\n            );\n          }\n        })}\n        {this.state.menus.map((item, index) => {\n          if (item.Type === \"megamenuholder\") {\n            return (\n              <div key={index}>\n                <div className=\"d-flex justify-content-center my-4\">\n                  <button type=\"button\" className=\"btn btn-primary btn-lg\">\n                    {item.CategoryName}\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-secondary btn-sm\"\n                    onClick={() =>\n                      this.editAble(item.CategoryName)\n                    }\n                  >\n                    <i className=\"fa fa-edit\" style={{ fontSize: \"16px\" }}></i>\n                  </button>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-secondary btn-sm ml-2\"\n                    onClick={() => this.alertsubmit(item._id)}\n                  >\n                    <i className=\"fa fa-close\" style={{ fontSize: \"16px\" }}></i>\n                  </button>\n                </div>\n\n                <div className=\"row\">\n                  <FlatList\n                    list={item.SubCategory}\n                    renderItem={this.renderMegaMenu}\n                    renderWhenEmpty={() => (\n                      <div className=\"d-flex justify-content-center my-4\">\n                        You didn't add any sub category yet\n                      </div>\n                    )}\n                    display={{\n                      grid: true,\n                      minColumnWidth: \"5px\",\n                      gridGap: \"10px\",\n                    }}\n                  />\n                </div>\n              </div>\n            );\n          }\n        })}\n      </div>\n    );\n  }\n}\n","C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\Url.js",[],["66","67"],"C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\User\\Userregister.js",[],"C:\\Users\\honey\\Downloads\\newtrippledevecom-main\\client\\src\\Component\\Admin\\Uploadproduct.js",["68"],"import React, { Component } from \"react\";\nimport CKEditor from \"react-ckeditor-component\";\nimport { Multiselect } from \"multiselect-react-dropdown\";\nimport Dropzone from \"react-dropzone\";\nimport axios from \"axios\";\nimport URL from \"../User/Url\";\nexport default class Uploadproduct extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: [],\n      sub: [],\n      data: [],\n      brands: [{ name: \"Apple\" }, { name: \"Iphone\" }, { name: \"Shaomi\" }],\n      Images: [],\n      title: \"\",\n      skunumber: \"\",\n      description: \"\",\n      price: \"\",\n      quantity: \"\",\n      weaight: \"\",\n      category: \"\",\n      subcategory: \"\",\n      brand: \"\",\n      discount: \"\",\n      stock: \"\",\n      shippingdetails: \"\",\n      manufacturesdetails: \"\",\n      selectedsize: [],\n      feature: false,\n      trend: false,\n      available: [{ name: \"L\" }, { name: \"X\" }, { name: \"M\" }],\n      image: \"\",\n    };\n  }\n\n  // onDrop = (files) => {\n  //   console.log(files[0]);\n\n  //   let formData = new FormData();\n  //   const config = {\n  //     header: { \"content-type\": \"multipart/form-data\" },\n  //   };\n  //   formData.append(\"file\", files[0]);\n  //   //save the Image we chose inside the Node Server\n  //   axios\n  //     .post(`${URL}/uploadImage`, formData, config)\n  //     .then((response) => {\n  //       if (response.data.success) {\n  //         this.setState({\n  //           Images: [...this.state.Images, response.data.image],\n  //         });\n  //       } else {\n  //         alert(\"Failed to save the Image in Server\");\n  //       }\n  //     })\n  //     .catch((err) => {\n  //       console.log(\"hi\");\n  //       console.log(err);\n  //     });\n  // };\n  updateContent(newContent) {\n    this.setState({\n      content: newContent,\n    });\n  }\n  onChangedes = (evt) => {\n    console.log(\"onChange fired with event info: \", evt);\n    var newContent = evt.editor.getData();\n    this.setState({\n      description: newContent,\n    });\n  };\n\n  onChangeship = (evt) => {\n    console.log(\"onChange fired with event info: \", evt);\n    var newContent = evt.editor.getData();\n    this.setState({\n      shippingdetails: newContent,\n    });\n  };\n\n  onChangemanu = (evt) => {\n    console.log(\"onChange fired with event info: \", evt);\n    var newContent = evt.editor.getData();\n    this.setState({\n      manufacturesdetails: newContent,\n    });\n  };\n\n  onBlur(evt) {\n    console.log(\"onBlur event called with event info: \", evt);\n  }\n\n  afterPaste(evt) {\n    console.log(\"afterPaste event called with event info: \", evt);\n  }\n  onDelete = (image) => {\n    const currentIndex = this.state.Images.indexOf(image);\n\n    let newImages = [...this.state.Images];\n    newImages.splice(currentIndex, 1);\n\n    this.setState({ Images: newImages });\n  };\n  async componentDidMount() {\n    await axios\n      .get(`${URL}/getmenus`, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      .then((data) => {\n        this.setState({ data: data.data });\n        const category = data.data.map((item) => {\n          return { name: item.CategoryName };\n        });\n\n        this.setState({ options: category });\n      });\n  }\n\n  brand = (selectedList, selectedItem) => {\n    this.setState({ brand: selectedItem.name });\n  };\n\n  onSelect = (selectedList, selectedItem) => {\n    this.setState({ selectedsize: selectedList });\n  };\n\n  onChangeHandler = async (event) => {\n    // console.log(event.target.files[0]);\n    let formData = new FormData();\n    formData.append(\"file\", event.target.files[0]);\n\n    const config = {\n      header: { \"content-type\": \"multipart/form-data\" },\n    };\n\n    await axios\n      .post(`${URL}/uploadImage`, formData, config)\n      .then((response) => {\n        console.log(\"kk\", response);\n        if (response.data.success) {\n          this.setState({\n            Images: [...this.state.Images, response.data.image],\n          });\n        } else {\n          alert(\"Failed to save the Image in Server\");\n        }\n      })\n      .catch((err) => {\n        console.log(\"hi\");\n        console.log(err);\n      });\n  };\n\n  Change = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  trend = (e) => {\n    this.setState({ trend: !this.state.trend });\n  };\n  feature = () => {\n    this.setState({ feature: !this.state.feature });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    const {\n      title,\n      Images,\n      skunumber,\n      description,\n      price,\n      quantity,\n      weaight,\n      category,\n      subcategory,\n      brand,\n      discount,\n      stock,\n      shippingdetails,\n      manufacturesdetails,\n      selectedsize,\n      feature,\n      trend,\n    } = this.state;\n    axios\n      .post(\n        `${URL}/uploadProduct`,\n        {\n          title,\n          Images,\n          skunumber,\n          description,\n          price,\n          quantity,\n          weaight,\n          category,\n          subcategory,\n          brand,\n          discount,\n          stock,\n          shippingdetails,\n          manufacturesdetails,\n          selectedsize,\n          feature,\n          trend,\n        },\n        { headers: { \"Content-Type\": \"application/json\" } }\n      )\n      .then((response) => {\n        if (response.data.success) {\n          alert(\"Successfully uploaded\");\n        } else {\n          alert(\"Faild to upload\");\n        }\n      });\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          {/* <Dropzone onDrop={this.onDrop} multiple={false} maxSize={800000000}>\n            {({ getRootProps, getInputProps }) => (\n              <div\n                style={{\n                  width: \"300px\",\n                  height: \"240px\",\n                  border: \"1px solid lightgray\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n                {...getRootProps()}\n              >\n                {console.log(\"getRootProps\", { ...getRootProps() })}\n                {console.log(\"getInputProps\", { ...getInputProps() })}\n                <input {...getInputProps()} />\n                <i className=\"fa fa-plus\" style={{ fontSize: \"3rem\" }}></i>\n                <Icon type=\"plus\" style={{ fontSize: \"3rem\" }} />\n              </div>\n            )}\n          </Dropzone> */}\n\n          <div\n            style={{\n              display: \"flex\",\n              width: \"350px\",\n              height: \"240px\",\n              overflowX: \"scroll\",\n            }}\n          >\n            {this.state.Images.map((image, index) => (\n              <div onClick={() => this.onDelete(image)}>\n                <img\n                  style={{ minWidth: \"300px\", width: \"300px\", height: \"240px\" }}\n                  src={`http://localhost:5000/${image}`}\n                  alt={`productImg-${index}`}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n        {/* {this.state.Images.map((image, index) => (\n          <div onClick={() => this.onDelete(image)}>\n            <img\n              style={{ minWidth: \"300px\", width: \"300px\", height: \"240px\" }}\n              src={`/${image}`}\n              alt={`productImg-${index}`}\n            />\n          </div>\n        ))} */}\n\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Select Image</label>\n\n            <input type=\"file\" name=\"file\" onChange={this.onChangeHandler} />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Title</label>\n            <input\n              type=\"text\"\n              name=\"title\"\n              onChange={this.Change}\n              value={this.state.title}\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter Title\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">SKU Number</label>\n            <input\n              type=\"text\"\n              name=\"skunumber\"\n              onChange={this.Change}\n              value={this.state.skunumber}\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter Title\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Discription</label>\n\n            <CKEditor\n              activeClass=\"p10\"\n              content={this.state.description}\n              value={this.state.description}\n              events={{\n                blur: this.onBlur,\n                afterPaste: this.afterPaste,\n                change: this.onChangedes,\n              }}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Price</label>\n            <input\n              type=\"text\"\n              name=\"price\"\n              onChange={this.Change}\n              value={this.state.price}\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter Price\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Quantity</label>\n            <input\n              type=\"text\"\n              name=\"quantity\"\n              onChange={this.Change}\n              value={this.state.quantity}\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter Quantity\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Weaight</label>\n            <input\n              type=\"text\"\n              name=\"weaight\"\n              onChange={this.Change}\n              value={this.state.weaight}\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter Quantity\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Select Category</label>\n            <Multiselect\n              options={this.state.options} // Options to display in the dropdown\n              selectedValues={this.state.selectedValue} // Preselected value to persist in dropdown\n              onSelect={this.category} // Function will trigger on select event\n              onRemove={this.onRemove} // Function will trigger on remove event\n              displayValue=\"name\" // Property name to display in the dropdown options\n              singleSelect=\"true\"\n            />\n          </div>\n          {this.state.sub.length > 0 && (\n            <div className=\"form-group\">\n              <label htmlFor=\"exampleInputEmail1\">Select Sub Category</label>\n              <Multiselect\n                options={this.state.sub} // Options to display in the dropdown\n                selectedValues={this.state.selectedValue} // Preselected value to persist in dropdown\n                onSelect={this.subcategory} // Function will trigger on select event\n                onRemove={this.onRemove} // Function will trigger on remove event\n                displayValue=\"name\" // Property name to display in the dropdown options\n                singleSelect=\"true\"\n              />\n            </div>\n          )}\n\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Select Brand</label>\n            <Multiselect\n              options={this.state.brands} // Options to display in the dropdown\n              selectedValues={this.state.selectedValue} // Preselected value to persist in dropdown\n              onSelect={this.brand} // Function will trigger on select event\n              onRemove={this.onRemove} // Function will trigger on remove event\n              displayValue=\"name\" // Property name to display in the dropdown options\n              singleSelect=\"true\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Discount</label>\n            <input\n              type=\"text\"\n              name=\"discount\"\n              onChange={this.Change}\n              value={this.state.discount}\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter Discount\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Stock</label>\n            <input\n              type=\"text\"\n              name=\"stock\"\n              onChange={this.Change}\n              value={this.state.stock}\n              className=\"form-control\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"Enter Stock\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Shipping DEtails</label>\n\n            <CKEditor\n              activeClass=\"p10\"\n              content={this.state.shippingdetails}\n              events={{\n                blur: this.onBlur,\n                afterPaste: this.afterPaste,\n                change: this.onChangeship,\n              }}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Manufactures DEtails</label>\n\n            <CKEditor\n              activeClass=\"p10\"\n              content={this.state.manufacturesdetails}\n              events={{\n                blur: this.onBlur,\n                afterPaste: this.afterPaste,\n                change: this.onChangemanu,\n              }}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Select availabel Size</label>\n            <Multiselect\n              options={this.state.available} // Options to display in the dropdown\n              selectedValues={this.state.selectedsize} // Preselected value to persist in dropdown\n              onSelect={this.onSelect} // Function will trigger on select event\n              onRemove={this.onRemove} // Function will trigger on remove event\n              displayValue=\"name\" // Property name to display in the dropdown options\n            />\n          </div>\n\n          <div className=\"form-check\">\n            <input\n              type=\"checkbox\"\n              name=\"featured\"\n              onChange={this.feature}\n              className=\"form-check-input\"\n              id=\"exampleCheck1\"\n            />\n            <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">\n              Is Feature?\n            </label>\n          </div>\n          <div className=\"form-check\">\n            <input\n              type=\"checkbox\"\n              name=\"trend\"\n              onChange={this.trend}\n              className=\"form-check-input\"\n              id=\"exampleCheck1\"\n            />\n            <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">\n              Is Trend?\n            </label>\n          </div>\n\n          <div></div>\n\n          <button type=\"submit\" className=\"btn btn-primary\">\n            Submit\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":33,"nodeType":"75","messageId":"76","endLine":2,"endColumn":39},{"ruleId":"73","severity":1,"message":"74","line":3,"column":33,"nodeType":"75","messageId":"76","endLine":3,"endColumn":39},{"ruleId":"73","severity":1,"message":"74","line":2,"column":33,"nodeType":"75","messageId":"76","endLine":2,"endColumn":39},{"ruleId":"77","severity":1,"message":"78","line":98,"column":13,"nodeType":"79","endLine":98,"endColumn":52},{"ruleId":"80","severity":1,"message":"81","line":367,"column":51,"nodeType":"82","messageId":"83","endLine":367,"endColumn":53},{"ruleId":"84","severity":1,"message":"85","line":368,"column":31,"nodeType":"86","messageId":"87","endLine":368,"endColumn":33},{"ruleId":"80","severity":1,"message":"81","line":393,"column":51,"nodeType":"82","messageId":"83","endLine":393,"endColumn":53},{"ruleId":"84","severity":1,"message":"85","line":394,"column":31,"nodeType":"86","messageId":"87","endLine":394,"endColumn":33},{"ruleId":"80","severity":1,"message":"81","line":417,"column":45,"nodeType":"82","messageId":"83","endLine":417,"endColumn":47},{"ruleId":"80","severity":1,"message":"81","line":463,"column":45,"nodeType":"82","messageId":"83","endLine":463,"endColumn":47},{"ruleId":"69","replacedBy":"88"},{"ruleId":"71","replacedBy":"89"},{"ruleId":"73","severity":1,"message":"90","line":4,"column":8,"nodeType":"75","messageId":"76","endLine":4,"endColumn":16},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["91"],["92"],"'Dropzone' is defined but never used.","no-global-assign","no-unsafe-negation"]